/* eslint-disable no-unused-vars */
/* eslint-disable no-undef */
/* eslint-disable react/prop-types */
import React, { useState, useRef } from 'react';
import carteiraDigitalVideo from "../assets/videos/carteira-digital.mp4"; // Importando o v√≠deo da carteira digital
import apiNodeJsVideo from "../assets/videos/api-nodejs.mp4"; // Importando o v√≠deo da API Node.js
import sabonitasVideo from "../assets/videos/veracosmeticos.mp4"; // Importando o v√≠deo Sabonitas
import portfolio1 from "../assets/videos/portfolio1.mp4"; // Importando o v√≠deo do Portfolio 1

const ProjectItem = ({ title, description, videoUrl, detailedDescription }) => {
  const [isHovered, setIsHovered] = useState(false);
  const [isExpanded, setIsExpanded] = useState(false);
  const [isPlaying, setIsPlaying] = useState(false);
  const videoRef = useRef(null); // Refer√™ncia para o v√≠deo

  const handleVideoClick = () => {
    if (isPlaying) {
      videoRef.current.requestFullscreen(); // Solicita o modo de tela cheia
    } else {
      setIsPlaying(true); // Inicia a reprodu√ß√£o se n√£o estiver tocando
    }
  };

  return (
    <div className="flex items-center justify-center mb-6">
      <div
        className="relative w-[600px] h-[337.5px] overflow-hidden mr-8 cursor-pointer"
        onMouseEnter={() => setIsHovered(true)}
        onMouseLeave={() => setIsHovered(false)}
        onClick={handleVideoClick} // Chama a fun√ß√£o ao clicar
      >
        {isPlaying ? (
          <video
            ref={videoRef}
            src={videoUrl}
            className="absolute top-0 left-0 w-full h-full object-cover"
            autoPlay
            loop
            muted
          />
        ) : (
          <div className="absolute inset-0 flex items-center justify-center">
            <video
              src={videoUrl}
              className="absolute top-0 left-0 w-full h-full object-cover opacity-30" // Imagem do v√≠deo esmaecida
              muted
              loop
              // Remover autoPlay aqui para n√£o iniciar automaticamente
            />
            <span className="text-white text-2xl font-bold">{title}</span> {/* Nome do t√≠tulo no lugar do texto "V√≠deo" */}
          </div>
        )}
      </div>
      <div className="flex-1 text-left max-w-[800px]">
        <h3 className="text-3xl font-bold mb-6">{title}</h3>
        <span className="block text-lg mb-6">{description}</span>
        <p
          className={`overflow-hidden transition-all duration-300 text-justify ${
            isExpanded ? 'max-h-full' : 'max-h-[150px]'
          }`}
        >
          {isExpanded ? (
            <>
              {detailedDescription}
            </>
          ) : (
            "Esta aplica√ß√£o tem como foco a funcionalidade e a comunica√ß√£o segura entre o frontend, backend e banco de dados, proporcionando uma experi√™ncia fluida e pr√°tica em uma Single Page Application (SPA)."
          )}
        </p>
        <button
          onClick={() => setIsExpanded(!isExpanded)}
          className="mt-2 bg-gray-800 text-white py-2 px-4 rounded"
        >
          {isExpanded ? 'Minimizar' : 'Confira!'}
        </button>
      </div>
    </div>
  );
};

const Projects = () => (
  <section className="p-12 bg-white my-4">
    <h2 className="pb-16 text-3xl font-bold text-center">meus projetos recentes</h2>
    <div className="mt-6">
      <ProjectItem
        title="Carteira Digital"
        description="Aplica√ß√£o fullstack, projetada para oferecer uma solu√ß√£o eficiente e intuitiva para o gerenciamento de entradas e sa√≠das financeiras."
        videoUrl={carteiraDigitalVideo}
        detailedDescription={
          <>
            Esta aplica√ß√£o tem como foco a funcionalidade e a comunica√ß√£o segura entre o frontend, backend e banco de dados, proporcionando uma experi√™ncia fluida e pr√°tica em uma Single Page Application (SPA).
            Stack Utilizada - MERN
            Frontend: React.js com Vite
            Backend: Node.js com Express.js
            Banco de Dados: MongoDB
            Funcionalidades Principais
            Frontend
            Interface Din√¢mica e Responsiva: Adapt√°vel a diferentes tamanhos de tela, garantindo uma experi√™ncia de usu√°rio consistente.
            Navega√ß√£o Fluida: Implementa√ß√£o de react-router-dom para uma navega√ß√£o r√°pida e intuitiva.
            Componentes Reutiliz√°veis: Estrutura modular que promove efici√™ncia e facilidade de manuten√ß√£o.
            Backend
            API RESTful: Estrutura robusta para gerenciar requisi√ß√µes de forma eficiente.
            Autentica√ß√£o de Usu√°rios: Implementa√ß√£o segura para proteger a privacidade dos dados.
            Manipula√ß√£o Segura de Transa√ß√µes: Prote√ß√£o contra acessos n√£o autorizados.
            Banco de Dados
            Armazenamento em MongoDB: Oferece flexibilidade e escalabilidade ideais para dados financeiros.
            Gerenciamento de Dados Estruturados: Estrutura organizada para f√°cil acesso e an√°lise.
            Seguran√ßa
            Tokens JWT (JSON Web Tokens): Implementa√ß√£o de uma camada adicional de seguran√ßa para acesso a informa√ß√µes financeiras sens√≠veis.
            Gerenciamento de Transa√ß√µes
            Registro de Transa√ß√µes: Facilita a entrada e sa√≠da de valores financeiros.
            C√°lculo Autom√°tico de Saldo: Proporciona uma vis√£o instant√¢nea das finan√ßas do usu√°rio.
          </>
        }
      />
      <ProjectItem
        title="Aplica√ß√£o Backend"
        description="Aplica√ß√£o backend CRUD desenvolvida em Node.js com TypeScript."
        videoUrl={apiNodeJsVideo}
        detailedDescription={
          <>
            Aplica√ß√£o backend CRUD (Create, Read, Update, Delete) desenvolvida em Node.js com TypeScript, utilizando o framework Express. O foco dessa aplica√ß√£o √© gerenciar informa√ß√µes sobre players e times, permitindo opera√ß√µes completas de CRUD para facilitar o acesso e a manipula√ß√£o de dados.
            üîç Estrutura da Aplica√ß√£o: A arquitetura da aplica√ß√£o foi organizada em diferentes camadas, garantindo uma separa√ß√£o clara de responsabilidades e facilitando a manuten√ß√£o e escalabilidade. A estrutura √© composta por: src: Diret√≥rio principal que abriga todo o c√≥digo. controllers: Respons√°veis por gerenciar as requisi√ß√µes e respostas da API. data: Armazena informa√ß√µes essenciais para a aplica√ß√£o. models: Define a estrutura dos dados, utilizando Mongoose para interagir com o banco de dados MongoDB. repositories: Encapsula a l√≥gica de acesso a dados, promovendo a reutiliza√ß√£o e a facilidade de testes. services: Cont√©m a l√≥gica de neg√≥cios, garantindo que a aplica√ß√£o siga as melhores pr√°ticas. utils: Funcionalidades auxiliares que facilitam a implementa√ß√£o de recursos comuns.
            üí° Tecnologias e Pr√°ticas Utilizadas: Node.js e Express: Para uma performance √°gil e eficiente na constru√ß√£o da API. TypeScript: Para garantir um c√≥digo mais robusto e com tipagem est√°tica. MongoDB: Para um gerenciamento de dados flex√≠vel e escal√°vel. JWT (JSON Web Tokens): Implementa√ß√£o de autentica√ß√£o segura. Thunder Client: Utilizado para verificar e testar as funcionalidades da aplica√ß√£o, garantindo que tudo estivesse funcionando conforme o esperado.
            Essa aplica√ß√£o n√£o apenas amplia meu conhecimento em desenvolvimento backend, mas tamb√©m proporciona uma solu√ß√£o pr√°tica para gerenciar dados de forma eficaz.
          </>
        }
      />
      <ProjectItem
        title="vera cosm√©ticos artesanais"
        description="Aplica√ß√£o dedicada ao gerenciamento e venda de produtos de beleza."
        videoUrl={sabonitasVideo}
        detailedDescription={
          <>
            Este projeto visa oferecer uma plataforma intuitiva para a venda de produtos de beleza, com foco na experi√™ncia do usu√°rio.
            Stack Utilizada - MERN
            Frontend: React.js com Vite
            Backend: Node.js com Express.js
            Banco de Dados: MongoDB
            Funcionalidades Principais
            Frontend
            Interface Atraente: Design responsivo e atrativo para os usu√°rios.
            Carrinho de Compras: Cliente optou por vendas diretas em contato com a empresa
            API RESTful: Gerenciamento eficiente dos produtos e usu√°rios.
            Seguran√ßa: Implementa√ß√£o de autentica√ß√£o para usu√°rios.
          </>
        }
      />
      <ProjectItem
        title="Portfolio mobile-first"
        description="Um portf√≥lio din√¢mico para exibir projetos e habilidades."
        videoUrl={portfolio1}
        detailedDescription={
          <>
            Este projeto √© um portf√≥lio interativo, permitindo que os usu√°rios visualizem e interajam com os projetos.
            Stack Utilizada - HTML, CSS e Javascript
            Funcionalidades Principais
            Interface Moderna: Design clean e responsivo.
            Exibi√ß√£o de Projetos: Apresenta√ß√£o din√¢mica dos projetos realizados.
          </>
        }
      />
      {/* Adicione os outros projetos da mesma forma */}
    </div>
  </section>
);

export default Projects;
